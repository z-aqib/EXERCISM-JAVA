/*
  Instructions
  In this exercise we will simulate the first turn of a Blackjack game. 
  You will receive two cards and will be able to see the face up card of the dealer. All cards are represented using a string such as "ace", "king", "three", "two", etc. The values of each card are:

  card	value	card	value
  ace	11	eight	8
  two	2	nine	9 
  three	3	ten	10
  four	4	jack	10
  five	5	queen	10
  six	6	king	10
  seven	7	other	0
  Note: Commonly, aces can take the value of 1 or 11 but for simplicity we will assume that they can only take the value of 11.

  Depending on your two cards and the card of the dealer, there is a strategy for the first turn of the game, in which you have the following options:
  - Stand (S)
  - Hit (H)
  - Split (P)
  - Automatically win (W)
  Although not optimal yet, you will follow the strategy your friend Alex has been developing, which is as follows:

  Category: Large Hand
  - If you have a pair of aces you must always split them.
  - If you have a Blackjack (two cards that sum up to a value of 21), and the dealer does not have an ace, a figure or a ten then you automatically win. If the dealer does have any of those cards then you'll have to stand and wait for the reveal of the other card.

  Category: Small Hand
  - If your cards sum up to 17 or higher you should always stand.
  - If your cards sum up to 11 or lower you should always hit.
  - If your cards sum up to a value within the range [12, 16] you should always stand unless the dealer has a 7 or higher, in which case you should always hit.
*/

public class Blackjack {

    public int parseCard(String card) {
        switch (card) {
            case "ace": return 11;
            case "two": return 2;
            case "three": return 3;
            case "four": return 4;
            case "five": return 5;
            case "six": return 6;
            case "seven": return 7;
            case "eight": return 8;
            case "nine": return 9;
            case "ten": return 10;
            case "jack": return 10;
            case "queen": return 10;
            case "king": return 10;
            case "other": return 0;
        }
        return 1;
    }

    public boolean isBlackjack(String card1, String card2) {
        int card1Value = parseCard(card1);
        int card2Value = parseCard(card2);
        int sum = card1Value + card2Value;
        if (sum == 21) {
            return true;
        }
        else {
            return false;
        }
    }

    public String largeHand(boolean isBlackjack, int dealerScore) {
        if (isBlackjack == false) {
            return "P";
        }
        else {
            if (dealerScore != 11 && dealerScore != 10) {
                return "W";
            }
            else 
            {
                return "S";  
            }
        }
        
    }

    public String smallHand(int handScore, int dealerScore) {
        if (handScore >= 17) {
            return "S";
        }
        else if (handScore <= 11) {
            return "H";
        }
        else if (handScore >= 12 && handScore <= 16) {
            if (dealerScore >= 7) {
                return "H";
            }
            else {
                return "S";
            }
        }
        else {
            return "";
        }
    }

    // FirstTurn returns the semi-optimal decision for the first turn, given the cards of the player and the dealer.
    // This function is already implemented and does not need to be edited. It pulls the other functions together in a
    // complete decision tree for the first turn.
    public String firstTurn(String card1, String card2, String dealerCard) {
        int handScore = parseCard(card1) + parseCard(card2);
        int dealerScore = parseCard(dealerCard);

        if (20 < handScore) {
            return largeHand(isBlackjack(card1, card2), dealerScore);
        } else {
            return smallHand(handScore, dealerScore);
        }
    }
}
